# -*- coding: utf-8 -*-
"""Butterfly Categorization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ISpPnj4BBvvoZwddzEFwaQoASu_40vWD
"""

import tensorflow as tf
import numpy as np
from PIL import Image

model = tf.saved_model.load('./butterfly-classification-mobilenet/MobileNet')
classes = [ "ADONIS" ,  "AFRICAN GIANT SWALLOWTAIL" ,  "AMERICAN SNOOT" ,  "AN 88" ,  "APPOLLO" ,
           "ATALA" ,  "BANDED ORANGE HELICONIAN" ,  "BANDED PEACOCK" ,  "BECKERS WHITE" ,
           "BLACK HAIRSTREAK" ,  "BLUE MORPHO" ,  "BLUE SPOTTED CROW" ,  "BROWN SIPROETA" ,
           "CABBAGE WHITE" ,  "CAIRNS BIRDWING" ,  "CHECQUERED SKIPPER" ,  "CHESTNUT" ,  "CLEOPATRA" ,
           "CLODIUS PARNASSIAN" ,  "CLOUDED SULPHUR" ,  "COMMON BANDED AWL" ,  "COMMON WOOD-NYMPH" ,
           "COPPER TAIL" ,  "CRECENT" ,  "CRIMSON PATCH" ,  "DANAID EGGFLY" ,  "EASTERN COMA" ,
           "EASTERN DAPPLE WHITE" ,  "EASTERN PINE ELFIN" ,  "ELBOWED PIERROT" ,  "GOLD BANDED" ,
           "GREAT EGGFLY" ,  "GREAT JAY" ,  "GREEN CELLED CATTLEHEART" ,  "GREY HAIRSTREAK" ,
           "INDRA SWALLOW" ,  "IPHICLUS SISTER" ,  "JULIA" ,  "LARGE MARBLE" ,  "MALACHITE" ,
           "MANGROVE SKIPPER" ,  "MESTRA" ,  "METALMARK" ,  "MILBERTS TORTOISESHELL" ,  "MONARCH" ,
           "MOURNING CLOAK" ,  "ORANGE OAKLEAF" ,  "ORANGE TIP" ,  "ORCHARD SWALLOW" ,  "PAINTED LADY" ,
           "PAPER KITE" ,  "PEACOCK" ,  "PINE WHITE" ,  "PIPEVINE SWALLOW" ,  "POPINJAY" ,
           "PURPLE HAIRSTREAK" ,  "PURPLISH COPPER" ,  "QUESTION MARK" ,  "RED ADMIRAL" ,
           "RED CRACKER" ,  "RED POSTMAN" ,  "RED SPOTTED PURPLE" ,  "SCARCE SWALLOW" ,
           "SILVER SPOT SKIPPER" ,  "SLEEPY ORANGE" ,  "SOOTYWING" ,  "SOUTHERN DOGFACE" ,
           "STRAITED QUEEN" ,  "TROPICAL LEAFWING" ,  "TWO BARRED FLASHER" ,  "ULYSES" ,  "VICEROY" ,
           "WOOD SATYR" ,  "YELLOW SWALLOW TAIL" ,  "ZEBRA LONG WING" , ]

Id=[]
import numpy as np
import pandas as pd

import os
for dirname, _, filenames in os.walk('./butterfly-classification/train'):
    for filename in filenames:
        Id.append(os.path.join(dirname, filename))
Id[:5]

train=pd.DataFrame()
train=train.assign(filename=Id)
train.head()

train['label']=train['filename']
train['label']=train['label'].str.replace('./butterfly-classification/train/','')
train.head()

train['label'] = train['label'].str.split('/').str[0]
train.head()

Id=[]
import numpy as np
import pandas as pd

import os
for dirname, _, filenames in os.walk('./butterfly-classification/test'):
    for filename in filenames:
        Id.append(os.path.join(dirname, filename))
Id[:5]

test=pd.DataFrame()
test=test.assign(filename=Id)
test.head()

test['label']=test['filename']
test['label']=test['label'].str.replace('./butterfly-classification/test/','')
test.head()

test['label'] = test['label'].str.split('/').str[0]
test.head()

result=[]
for i in test.filename:
    img = Image.open(i).convert('RGB')
    img = img.resize((300, 300 * img.size[1] // img.size[0]), Image.ANTIALIAS)
    inp_numpy = np.array(img)[None]
    inp = tf.constant(inp_numpy, dtype='float32')
    class_scores = model(inp)[0].numpy()
    result.append(classes[class_scores.argmax()])
result[:5]

test=test.assign(prediction=result)
test.head()

result=[]
for i in train.filename:
    img = Image.open(i).convert('RGB')
    img = img.resize((300, 300 * img.size[1] // img.size[0]), Image.ANTIALIAS)
    inp_numpy = np.array(img)[None]
    inp = tf.constant(inp_numpy, dtype='float32')
    class_scores = model(inp)[0].numpy()
    result.append(classes[class_scores.argmax()])
result[:5]

train=train.assign(prediction=result)
train.head()

from sklearn.metrics import classification_report
print(classification_report(train['label'],train['prediction']))

print(classification_report(test['label'],test['prediction']))

Id=[]
import numpy as np
import pandas as pd

import os
for dirname, _, filenames in os.walk('./butterfly-classification/sol'):
    for filename in filenames:
        Id.append(os.path.join(dirname, filename))
Id[:5]

sol=pd.DataFrame()
sol=sol.assign(filename=Id)
sol.head()

sol['file'] = sol['filename'].str.split('/').str[-1]
sol['id'] = sol['file'].str.split('_').str[1]
sol['id']=sol['id'].astype('int')
sol=sol.sort_values(by=['id'])
sol['id']='Image_'+sol['id'].astype('str')+'.jpg'
sol=sol.drop(['file'],axis=1)
sol.head()

result=[]
for i in sol.filename:
    img = Image.open(i).convert('RGB')
    img = img.resize((300, 300 * img.size[1] // img.size[0]), Image.ANTIALIAS)
    inp_numpy = np.array(img)[None]
    inp = tf.constant(inp_numpy, dtype='float32')
    class_scores = model(inp)[0].numpy()
    result.append(classes[class_scores.argmax()])
result[:5]

sol=sol.assign(label=result)
sol.head()

sol=sol.drop(['filename'],axis=1)
sol.columns=['filename','label']
sol.reset_index(inplace=True,drop=True)
sol.head()

sol.to_csv('./MobileNet.csv',index=False)